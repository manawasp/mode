[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"modeStreaming" = ["py.typed"]

[tool.distutils.bdist_wheel]
universal = true

[project]
name = "mode-streaming"
version = "0.3.5"
description = "AsyncIO Service-based programming"
readme = "README.md"
requires-python = ">=3.8"
keywords = ["asyncio", "service", "bootsteps", "graph", "coroutine"]
authors = [
    { name = "Faust Streaming", email = "williambbarnhart@gmail.com" },
]
classifiers = [
    "Framework :: AsyncIO",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Unix",
    "Environment :: No Input/Output (Daemon)",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
]
dependencies = [
    "colorlog>=6.0.0,<7.0.0",
    "croniter>=2.0.0,<3.0.0",
    "mypy_extensions",
]

[project.optional-dependencies]
eventlet = [
    "faust-aioeventlet",
    "dnspython",
]
gevent = [
    "asyncio-gevent~=0.2",
]
uvloop = [
    "uvloop>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/faust-streaming/mode"
Documentation = "https://faust-streaming.github.io/mode/"
Repository = "https://github.com/faust-streaming/mode"

[tool.pytest.ini_options]
minversion = "6.0"
python_classes = "test_*"
testpaths = [
    "tests/unit",
    "tests/functional",
]

[tool.coverage.run]
parallel = true
context = '${CONTEXT}'
source = [
    "mode",
    "tests/*"
]
omit = [
    "venv/*",
    "tests/*",

    # tested by functional tests
    "mode/loop/*",

    # not needed
    "mode/types/*",
    "mode/utils/types/*",
    "mode/utils/mocks.py",

    # been in celery since forever
    "mode/utils/graphs/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstractmethod",
    "@abc.abstractmethod",
    "if sys.platform == 'win32':",
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:"
]
fail_under = 93
show_missing = true

[tool.mypy]
# --strict but not --implicit-optional
cache_fine_grained = true
check_untyped_defs = true
disallow_any_decorated = false
disallow_any_expr = false
disallow_any_generics = false
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "normal"
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = false
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff]
target-version = "py38"
line-length = 79
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "examples",
    "buck-out",
    "build",
    "dist",
    "docs",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "D101",# pydocstyle: docstring in public class
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "S",   # bandit
    "W",   # pycodestyle warnings
    "RUF", # Ruff-specific warnings
    "UP",  # pyupgrade
    "PT",  # style check for pytest
]
ignore = [
    # line too long, handled by ruff format
    "E501",

    # Disable bandit check of "assert" in code as they are used to fix
    # mypy detection in some case
    "S101",

    # Ignore: `@pytest.mark.parametrize`, expected `tuple`
    "PT006",

    # Allow pytest.mark.asyncio without the parentheses
    "PT023"
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D", "S"]

[tool.ruff.lint.isort]
known-first-party = ["mode", "tests"]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
skip-magic-trailing-comma = true

# Like Black
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.commitizen]
version_provider = "pep621"
